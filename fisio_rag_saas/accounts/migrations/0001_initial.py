# Generated by Django 5.2.4 on 2025-08-04 09:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Nome Tenant')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrizione')),
                ('subscription_type', models.CharField(choices=[('free', 'Gratuito'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='free', max_length=50, verbose_name='Tipo Abbonamento')),
                ('max_users', models.PositiveIntegerField(default=5, verbose_name='Massimo Utenti')),
                ('max_documents', models.PositiveIntegerField(default=100, verbose_name='Massimo Documenti')),
                ('max_storage_mb', models.PositiveIntegerField(default=1000, verbose_name='Massimo Storage (MB)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Attivo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creato il')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aggiornato il')),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'db_table': 'accounts_tenant',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('display_name', models.CharField(blank=True, max_length=255, verbose_name='Nome Visualizzato')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biografia')),
                ('profession', models.CharField(blank=True, choices=[('student', 'Studente'), ('physiotherapist', 'Fisioterapista'), ('doctor', 'Medico'), ('researcher', 'Ricercatore'), ('educator', 'Docente'), ('other', 'Altro')], max_length=100, verbose_name='Professione')),
                ('institution', models.CharField(blank=True, max_length=255, verbose_name='Istituzione')),
                ('role', models.CharField(choices=[('admin', 'Amministratore'), ('educator', 'Docente'), ('student', 'Studente'), ('viewer', 'Visualizzatore')], default='student', max_length=50, verbose_name='Ruolo')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Ultima Attivit√†')),
                ('quiz_taken', models.PositiveIntegerField(default=0, verbose_name='Quiz Completati')),
                ('documents_accessed', models.PositiveIntegerField(default=0, verbose_name='Documenti Consultati')),
                ('preferred_language', models.CharField(default='it', max_length=10, verbose_name='Lingua Preferita')),
                ('notifications_enabled', models.BooleanField(default=True, verbose_name='Notifiche Abilitate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creato il')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aggiornato il')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='accounts.tenant', verbose_name='Tenant')),
            ],
            options={
                'verbose_name': 'Utente',
                'verbose_name_plural': 'Utenti',
                'db_table': 'accounts_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
