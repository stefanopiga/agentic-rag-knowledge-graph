name: CI/CD Pipeline - Modern Stack

on:
  push:
    branches: [ main, develop, docker-modernization ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Linting e Type Checking
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV (Python Package Manager)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Setup BUN (JavaScript Runtime)
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install Python dependencies with UV
        run: |
          uv sync --dev
          
      - name: Install Frontend dependencies with PNPM
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Python linting with ruff
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Python type checking with mypy
        run: uv run mypy --config-file pyproject.toml .

      - name: Frontend linting
        working-directory: ./frontend
        run: |
          pnpm run lint
          pnpm run type-check

  # Job 2: Test Suite
  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fisiorag_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687
          - 7474:7474

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV (Python Package Manager)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Setup BUN for testing
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install Python dependencies
        run: uv sync --dev

      - name: Install Frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fisiorag_test
          NEO4J_URI: neo4j://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
        run: |
          uv run python -c "
          import psycopg2
          conn = psycopg2.connect('postgresql://postgres:postgres@localhost:5432/postgres')
          conn.autocommit = True
          cur = conn.cursor()
          cur.execute('CREATE EXTENSION IF NOT EXISTS vector;')
          conn.close()
          "

      - name: Run Python tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fisiorag_test
          NEO4J_URI: neo4j://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          LLM_PROVIDER: openai
          LLM_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          EMBEDDING_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          uv run pytest tests/ -v --cov=. --cov-report=xml

      - name: Run Frontend tests with BUN
        working-directory: ./frontend
        run: |
          bun test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Job 3: Build e Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV (Python Package Manager)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Setup BUN for build
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install dependencies
        run: |
          uv sync --dev
          cd frontend && pnpm install --frozen-lockfile

      - name: Build Frontend with BUN
        working-directory: ./frontend
        run: |
          bun run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Job 4: Performance Benchmarks
  performance:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV for benchmarks
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Setup BUN for frontend benchmarks
        uses: oven-sh/setup-bun@v2

      - name: Run performance benchmarks
        run: |
          uv run python scripts/test_performance_optimizations.py

      - name: Frontend bundle analysis
        working-directory: ./frontend
        run: |
          bun run build --analyze

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Read performance results and comment on PR
            // Implementation would read benchmark results and post to PR
