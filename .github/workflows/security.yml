name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  # Python Security Scanning
  python-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV (Python Package Manager)
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-security-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-security-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run Bandit security scanner
        run: |
          uv run bandit -r agent/ ingestion/ fisio_rag_saas/ -f json -o bandit-report.json || true
          uv run bandit -r agent/ ingestion/ fisio_rag_saas/

      - name: Run Safety for known vulnerabilities
        run: |
          uv run safety check --json --output safety-report.json || true
          uv run safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            safety-report.json

  # JavaScript/Node.js Security Scanning
  javascript-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        working-directory: ./frontend
        run: |
          pnpm audit --json > ../npm-audit-report.json || true
          pnpm audit

      - name: Run Snyk for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json --json-file-output=snyk-report.json

      - name: Upload JavaScript security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: javascript-security-reports
          path: |
            npm-audit-report.json
            snyk-report.json

  # Container Security Scanning
  container-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: fisiorag:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fisiorag:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup for Python analysis
        if: matrix.language == 'python'
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install Python dependencies for analysis
        if: matrix.language == 'python'
        run: uv sync

      - name: Setup for JavaScript analysis
        if: matrix.language == 'javascript'
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js for JavaScript analysis
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install JavaScript dependencies for analysis
        if: matrix.language == 'javascript'
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
