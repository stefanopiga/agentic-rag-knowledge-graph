# Docker Compose for FisioRAG Monitoring Stack
version: "3.8"

networks:
  monitoring:
    driver: bridge
  fisiorag:
    external: true  # Connect to main application network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: fisiorag-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - ./prometheus/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - fisiorag
    restart: unless-stopped
    depends_on:
      - cadvisor
      - node-exporter
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.fisiorag.local`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.1.1
    container_name: fisiorag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=fisiorag-admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.fisiorag.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Alertmanager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: fisiorag-alertmanager
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.fisiorag.local`)"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

  # Node Exporter - Host system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: fisiorag-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: fisiorag-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    restart: unless-stopped

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.1
    container_name: fisiorag-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:password@postgres:5432/fisiorag?sslmode=disable
    networks:
      - monitoring
      - fisiorag
    restart: unless-stopped
    depends_on:
      - prometheus

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.53.0
    container_name: fisiorag-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    command:
      - '--redis.addr=redis://redis:6379'
      - '--web.listen-address=0.0.0.0:9121'
      - '--web.telemetry-path=/metrics'
    networks:
      - monitoring
      - fisiorag
    restart: unless-stopped

  # Grafana Image Renderer (for PDF reports)
  renderer:
    image: grafana/grafana-image-renderer:3.6.1
    container_name: fisiorag-renderer
    ports:
      - "8081:8081"
    environment:
      - ENABLE_METRICS=true
      - RENDERING_MODE=default
      - RENDERING_CLUSTERING_MODE=default
      - RENDERING_CLUSTERING_MAX_CONCURRENCY=5
    networks:
      - monitoring
    restart: unless-stopped

  # Optional: Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: fisiorag-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - monitoring
    restart: unless-stopped

  # Optional: Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: fisiorag-promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # Optional: Traefik for reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: fisiorag-traefik
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    restart: unless-stopped
