services:
  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      # Use a named volume for the container's virtualenv to avoid host shadowing
      - app_venv:/app/.venv
    depends_on:
      - postgres
      - neo4j
      - redis
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://rag_user:rag_password@postgres:5432/rag_db
      OPENAI_API_KEY: ${LLM_API_KEY}
      NEO4J_URI: bolt://neo4j:7687
      REDIS_URL: redis://redis:6379/0
    command: uv run uvicorn agent.api:app --host 0.0.0.0 --port 8000 --proxy-headers

  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rag_db}
      POSTGRES_USER: ${POSTGRES_USER:-rag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rag_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/schema_with_auth.sql:/docker-entrypoint-initdb.d/init.sql

  neo4j:
    image: neo4j:5
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc"]'

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  neo4j_data:
  redis_data:
  app_venv:
